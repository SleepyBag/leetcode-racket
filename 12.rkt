(define/contract (int-to-roman num)
  (-> exact-integer? string?)
    (let ((dict '((1000 . "M")
                  (900 . "CM")
                  (500 . "D")
                  (400 . "CD")
                  (100 . "C")
                  (90 . "XC")
                  (50 . "L")
                  (40 . "XL")
                  (10 . "X")
                  (9 . "IX")
                  (5 . "V")
                  (4 . "IV")
                  (1 . "I")))
          (ans ""))
      (do ()
        ((= num 0))
        (let ((pair (list-ref dict 
                              (index-where dict (lambda (pair) (<= (car pair) num))))))
         (set! ans (string-append ans (cdr pair)))
         (set! num (- num (car pair)))
        )
      )
      ans
    )
  )
